apiVersion: networking.k8s.io/v1  # Utilisation de l'API Kubernetes pour gÃ©rer l'Ingress
kind: Ingress  # DÃ©clare une ressource Ingress pour router les requÃªtes HTTP/HTTPS
metadata:
  name: ingress-srv  # Nom de l'Ingress, utile pour l'identifier dans le cluster
  annotations:
    kubernetes.io/ingress.class: nginx  # SpÃ©cifie que cet Ingress est gÃ©rÃ© par le contrÃ´leur Nginx
    nginx.ingress.kubernetes.io/use-regex: "true"  # Active l'utilisation des regex pour certaines routes

spec:
  rules:  # DÃ©finition des rÃ¨gles de routage HTTP
    - host: posts.com  # Ce routage s'applique uniquement au domaine posts.com
      http:
        paths:
          - path: /posts/create  # Route les requÃªtes commenÃ§ant par /posts/create
            pathType: Prefix  # Correspond Ã  un prÃ©fixe exact
            backend:
              service:
                name: posts-clusterip-srv  # Envoie les requÃªtes au service `posts-clusterip-srv`
                port:
                  number: 4000  # Port d'Ã©coute du service (gÃ¨re la crÃ©ation de posts)

          - path: /posts  # Route les requÃªtes vers /posts
            pathType: Prefix  # Correspondance par prÃ©fixe
            backend:
              service:
                name: query-srv  # Redirige vers le service `query-srv`
                port:
                  number: 4002  # Port du service (probablement pour rÃ©cupÃ©rer les posts)

          - path: /posts/?(.*)/comments  # Route les requÃªtes pour rÃ©cupÃ©rer les commentaires dâ€™un post spÃ©cifique
            pathType: ImplementationSpecific  # Permet d'utiliser une expression rÃ©guliÃ¨re
            backend:
              service:
                name: comments-srv  # Envoie les requÃªtes au service `comments-srv`
                port:
                  number: 4001  # Port du service (gÃ¨re les commentaires)

          - path: /?(.*)  # Route toutes les autres requÃªtes vers le frontend
            pathType: ImplementationSpecific  # Utilisation d'une regex pour capturer toutes les routes non dÃ©finies ci-dessus
            backend:
              service:
                name: client-srv  # Envoie les requÃªtes au service `client-srv`
                port:
                  number: 3000  # Port du service (probablement l'application frontend)

# ğŸ“Œ DÃ©brief :
# - Cet Ingress route les requÃªtes basÃ©es sur le domaine `posts.com`
# - Il distribue le trafic vers diffÃ©rents services en fonction du chemin :
#   - `/posts/create` â†’ Service `posts-clusterip-srv` (port 4000) pour crÃ©er un post.
#   - `/posts` â†’ Service `query-srv` (port 4002) pour rÃ©cupÃ©rer les posts.
#   - `/posts/{id}/comments` â†’ Service `comments-srv` (port 4001) pour gÃ©rer les commentaires.
#   - Toutes les autres requÃªtes (`/.*`) â†’ Service `client-srv` (port 3000), qui sert probablement l'interface utilisateur.
# - Utilisation de **NGINX** comme contrÃ´leur Ingress.
# - Usage de **regex** pour gÃ©rer des chemins dynamiques (`posts/{id}/comments` et `/.*`).
# - Possibles amÃ©liorations :
#   - Ajouter une configuration **TLS** pour la sÃ©curitÃ©.
#   - Ajouter des rÃ¨gles de **restriction dâ€™accÃ¨s** si nÃ©cessaire.
#   - Optimiser lâ€™utilisation des **regex** pour de meilleures performances.
